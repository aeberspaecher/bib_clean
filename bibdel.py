#!/usr/bin/env python
#-*- coding:utf-8 -*-

"""Remove unwanted bibliography fields fom BibTeX file. Use this to unbloat
.bib files generated by e.g. Menedeley. In such files, there may be fields
such as the abstract, URL or similar information you do not want to appear
in a journal articles bibliography. Some journals use styles that include
such unwanted information (apparently APS journals do).

Use like this:
./bidel.py --keys=abstract,url your_bad_bib.bib > your_better_bib.bib
"""

from optparse import OptionParser


def unbloat(file_name, fields_to_delete):
    """Remove unwanted BibTeX fields from file.

    Parameters
    ----------
    file_name : string
        Filename.
    fields_to_delete : list
        List of unwanted keys.

    Returns
    -------
    cleaned_file : list
        List of lines that contain the 'sanitized' BibTeX file.
    """

    lines = open(file_name, mode="r").readlines()
    out_lines = []

    for line in lines:
        line_may_stay = True
        for del_field in fields_to_delete:
            if(del_field in line):
                line_may_stay = False

        if(line_may_stay):
            out_lines.append(line[:-1].rstrip())  # remove trailing newline character, also
        else:
            # if the current line is to be removed from the output, we may need
            # to remove the final comma in the previous line. this is the case
            # whenever the line to be removed is the last field of a BibTeX entry
            # (this line does not end with a comma!)
            if(not line.strip().endswith(",")):
                out_lines[-1] = out_lines[-1][:-1]

    return out_lines


if(__name__ == '__main__'):
    # parse command line arguments:
    usage = "usage: %prog --keys key1,key2,key3 filename. Get help with --help."
    parser = OptionParser(usage=usage, version="%prog 0.1")
    parser.add_option("-k", "--keys", action="store", dest="keys", type="string",
                      help="List of keys (e.g. 'abstract,url')")
    (options, args) = parser.parse_args()

    if(options.keys is None):
        parser.error("Give keys to delete with --keys option!")
    if(len(args) == 0):
        parser.error("No filename given!")

    cleaned_file = unbloat(args[0], options.keys.split(","))
    for line in cleaned_file:
        print line
